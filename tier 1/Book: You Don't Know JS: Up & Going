https://github.com/getify/You-Dont-Know-JS/blob/master/up%20&%20going/README.md#you-dont-know-js-up--going

Notes: 

*Started me out with Java because it's the oldest and most widely used technology on the web. Most important for web development. Java Script, not just Java. 
*code = source code. Tells computer what tasks to perform. 
*words, numbers, symbols, operators, and arrangement of these, make up a language. 
*operator looks like this: a = b * 2; It is a mathematical operation. "a" and "b" are variables. variable = like a box you store something in, like a number. Or think of them as the number itself. 
* a digit, like the number 2, is called a literal value. 
*the "=" (assignment) and "*" (multiplication) are operators within themselves. 
*explained beautifully. The statement a=b*2; tells the computer to: 1)get current value stored in variable b 2)multiply that value by 2 3)store the result into variable a. 
*a program is a collection of statements. 
*interpreter/compiler = transforms/translates code into commands computer can understand. 
  *interpreting: translated top to bottom, line by line, every time program is run. 
  *compiling: translation done ahead of time. When program is run, it's running this already compiled computer instructions. 
*print text = output to the user. I'm using developer console until I can get Brackets to output text. 
* a=21; 
  b=a*2; 
  console.log(b); (this prints out logical conclusion.)
  42. 
*log(b) called a 'function call'. The b variable is handed to this 'log' function. 'log()' commands cpu to take variable b and print it to the console. 
*The 'console.' part is where the 'log()' function is located, i.e., in the console. Called an 'object reference'.  
*Another way to create text/user output is with 'alert()' function. And this spits out the answer in a pop-up box that I have to click 'ok'. That's part of it's function: 1)To spit out answer 2)In a pop up box. 
*A function is a rule, that is applied to an input, and gives an output. Example: input is 5 beans, function is you add 3 beans, output would be 8 beans. Function = a constant rule that is applied to an input, and spits out an output. 
*The 'log()' function tells machine to show me/print what the value of 'b' is. 
*'prompt()' is a function. It asks the user whatever is between it's parethesis, in a pop up box. The answer is then saved as a variable. 
       *age=prompt("what's your age?");
       *a box pops up.
       *I input '29'.
       *Now the variable 'age' is equal to '29'. 
       *console.log(age); '29' should print out. 
*a=42; 
     *variable on left side called 'target variable'
     *equal sign is called an operator. This particular operator used for assignment. 
     *value on right side, called 'source value'. 
     *To specify assignment of a variable, the variable is always on left hand side and value is on right side. 
*'var' is short for variable. 
     *example: var a=20; This sets 'a' as a variable, and gives it the value of 20. 
     *now that I've set 'scope'/precedent of 'a' being a variable, i can subsequently change it. 
     *a=a+1; now variable 'a' is set to 21. 
*compound assignment operators: +=, -=, *=, /=.
     * Example: a+=2; same as a=a+2. Perform two operations. Tricky. 
     *a-=5; same as a=a-5. 
     *a*=9; same as a=a*9.
     *a/=9; same as a=a/9. 
     
*increment/decrement. Incrementing/decrementing. Basically, increasing/decreasing a variable by one. 
     *x++; the '++' is the incrementer. Adds one, to the variable. Looks like this: x=x+1. 
     *x--; x=x-1.
*if the plus or minus signs come before the variable, called prefix operator. Adds one then returns value. Adding 1 is performed first then it is incremented. 
     *var x=1;
      var y = ++x;  //x=x+1, which is x=1+1, x=2, then it's deep copied to 'y'. y=2. Deep copy means that first the operation is performed to obtain the new value of x, then it is copied to y. 
*postfix operator (x++) returns value of variable, then then increments the value. The initial value of x is used for returning value, then it is incremented. 
     *var x=1;
      var y = x++;  //x=1, and x=x+1, which is x=1+1, x=2. But first x is copied to y, so y=1. Called a shallow copy, because first it is copied, then the operation is performed. 
      *
      
*fuzzy logic. These are operators. They perform an operation.
     *'==' means roughly equal. a==b
     *'===' means strictly equal. a===b
     *'!=' means roughly not-equal. a!=b
     *'!==' means strictly not-equal. a!==b
*comparison.
     *'<' means less than. 1<2
     *'>' greater than. 2>1
     *'<=' less than or roughly equal to. 3<=4
     *'>=' greater than or roughly equal to. 2>=2.
     *'=>' or '=<' doesn't work for comparisons. Need to have the greater/less part first. 
*operand=variable. 
     *A binary operator has two operands/variables, one on each side of the operator. 3+4
     *unary operator has one variable/operand. Either before or after the operator. a++, or ++a.
     *compound binary operator. a+=b; which is a=a+b.
     *operand just means the thing/object that the operator is acting upon. 
*Remainder operator. 12%5=2 or returns 2. 
*logical operators.
     *&& (and)
     *|| (or)
*When you need to do math, you want a number.
*when you need to print a word/characters on the screen, you need a string. A string is one or more: characters, words, sentences.
*when you need to make a decision in your program, you need a boolean. boolean comes back with a value that is either true or false. 
     *"I am a string"
     *'I am also a string'
     *42; number.
     *true; false; boolean. 
     *These are all types of values. A value can be a string/number/boolean. There are also arrays, objects, functions, and more. 
*A number can also be a string, if it is in quotes. var a="42", this is a string. var b=42; this is a number. 
*I can convert/coerce different value types. If I want to convert/coerce a string into a number.
     *var a="42"; 
      var b=number(a);
      console.log(a); will print out string "42".
      console.log(b); will print out number 42. 
      'number' is a function that converts this type of string, to a type of number. In Javascript, this is called explicit coercion, from one type to another. There is implicit coercion, it's not a function I type out, and it happens automatically. Like this: "99.99" == 99.99; The comparison then becomes 99.99 == 99.99, which is true. 
      *explicit conversion/coercion also called casting. It is performed by code instructions. 
*Machine code= a series of binary 0s and 1s. 
*choosing good names for variables and functions allows reader of code, and me, to better understand what is going on. 
*To make a comment in Javascript
     *//this is a single-line comment
     *     /*This is a 
                 multiline comment. */
     * Multiline comment can also be put in the middle of text: var a= /*won't be read by machine*/ 42;
*variable= the value within can vary over time.
* I can declare a variable to hold a specific type of value. So only strings, or only numbers. This called 'type enforcement' or 'static typing'. 
*'weak typing'/'dynamic typing' = variable can hold any type of value/type form. So a single variable can hold whatever. A string one moment, a digit next, etc. Javascript uses weak/dynamic typing. 
*To convert/coerce a number to string
     *var a=1;
      a=string(a);
      console.log(a); will print out "1"
*Declare a constant variable. Do it at top of program/code, so that you can alter it in one place. 
     *Convention is to capitalize the constant variable, with underscores between mulitiple words. 
      var TAX_RATE = .08;
     *But there is no command that occures that makes the variable fixed, it's purely by convention and not designating that variable as something else. 
*var number = 1.2345; //four decimel places. 
 console.log(number); //will print 1.2345
 console.log(number.toFixed(2)); //'.toFixed' is a function that rounds digits to whatever I specify. This will print as 1.23.    capitalization of the function command is necessary. I need to have the 'F' capitalized for this to work. 
    *JavaScript doesn't automatically format for dollars. 
*Newest version of JavaScript called 'ES6'. I can set a constant variable so that it cannot later be changed. 
      *  const TAX_RATE =.08;
      *  'const' abbreviated for constant, and variable is implied. Very nice. 
*grouping a series of statements together, called a 'block'/'compound' statement. Do this by wrapping statements inside a curly-brace pair {}.
      *var amount = 50;
       {amount = amount * 2;
        console.log(amount);
        }
***I have no idea what grouping in a block does. I think it is used for conditional statements such as 'if/else, for, while'
      *while (x<10) {
        x++;
         }
           //I think this means that while x is less than 10, run the statements within the block/compound. "It allows you to use multiple statements where JavaScript expects only one statement." Allows multiple statements if the conditional statement is fulfilled. 
*conditional statement
     *var bank_balance=200;
      var amount =50;
      if (amount < bank_balance) {
       console.log("I want to buy this.");
       }
       * the 'if' statement works similar to a function with a fork in the road. Either way, a function is executed. To do something or not do something, depending on the answer to the 'if' statement. 
       *The if() statement, requires an expression between the parentheses that can be treated either true or false. If the statement is true, runs the block of statements. If false, nothing happens. 
*an if statement, needs 'else' for when the condition is false and I want to do something when it's false. 
     *const ACCESSORY_PRICE = 10;
      var bank_balance=300;
      var amount = 100;
      if (amount<bank_balance) {  //if what is in parentheses is true, then run the following block of code.
       console.log("I'll buy it.");
       amount = amount+ACCESSORY_PRICE;  //if true, then I'll buy it and then add 10 to amount. 
        }
       else {  //otherwise, or if statement is false, run the following block of code. 
        console.log("No thanks.");
*This is a 'while' true loop. It will execute what is in the block, so long as the condition within the () is met.
     while (numOfCustomers>0) {  
      console.log("How may I help you?");
      numOfCustomers=numOfCustomers-1;
       }
*This is a 'do while' loop. First it performs a loop/iteration, then it checks to make sure condition within () is met. So condition can be false, and it will still execute once. 
      *do {
       console.log("How may I help you?");
       numOfCustomers=numOfCustomers-1;
        } while (numOfCustomers>0);
      *do {
        statement
         } while(condition);
*a "for loop" is used to loop for a certain number of times. Has a specific format. 
      *for (initialExpression; condition; incrementexpression)
       statement
      *for (var i=0; i<=9; i=i+1) {
        console.log(i);
         }
      *var i=0              
***What's the color coding for certain text in JavaScript?
*The nuts and bolts of a function. A function is a named section of code, that is saved, and that code can be called/executed by calling that name. 
*Fuction format: 1)name of the function 2)argument, enclosed in parentheses 3)Statement that defines the function, enclosed in brackets. 
     *function name(argument) {
       console.log("statement");
      }
      
     *function printAmount() {
       console.log(price);
      }
      var price=1;
      printAmount(); //will print 1
      
     *function printAmount() {
        console.log(amount.toFixed(2));
       }
      var amount =1;
      printAmount(); //1
      amount = amount * 2;
      printAmount(); //2 
*if I just print a function, then whatever is within the block will be returned verbatim. 
                    *function amount() {
                        return '$'+'1';
                           }
                     console.log(amount) /*prints out the function
              *function amount() {
                  return '$'+'1';
                     }
                 amount();
                 //will return '$1'.              
            * function amount() {
                   return "$"+"1";
                      }
                 var ice = amount();
                 console.log(ice); 
            // $1 will print. my function is disguised as a variable, which I can then print, and it will work as a function, not just printing the function. Odd, but there you have it. 
*function doSomething(x) {
   console.log("argument: " + x);
      }
 doSomething("Hi");
 //will print 'argument: Hi'. This is how I input something into the function. Since the block within the function is linked to the argument. It's basically an undefined variable that is waiting to be defined by user. To define it, you call the function, and 'pass an argument' to the function. Call a function, use parentheses to input whatever you want into the function if the function is set up to receive it. If it's not set up to receive the argument, then it will print 'undefined'.
*lexical scope. Each function gets its own scope. scope = code within a function's block. So I can have two of the same variables set to different things, but in different functions. 
     *function one() {
     var a=1;
     console.log(a);
     } 
     one();
     1
     
     *function two() {
     var a=2;
     console.log(a);
     }
     two();
     2
*"only code inside that function, can access that function's scoped variables." Like looking through a periscope, piercing the veil of a function, and looking inside. 
*lexical scope. If I set a variable within a function, that does not set it for the entire page of code. It is only set and defined within the function. 
*Quicker way to call/print a variable is to just type it out with a semicolon and hit enter. No need to type out console.log();
*function. console.log(); //the function is log, it prints whatever is in the parentheses. It could be a variable or the actual code inside the variable. Either way, the parentheses is where you input information into the function. The log function takes that information, and outputs it on the screen. Or the alert function does something similar. To have the user, not the coder, input information, use the prompt function. Once again, what is in the parentheses is what will be put into the function. So a question like, "what is your age? " will be input into prompt function. At which point the prompt function opens a box and asks user the question. When the user types and presses enter, the prompt function then stores this information in a variable. var age=prompt("what's your age? ");
*It does matter what order I define my variables. 
      *a=2;
       b=a+1;
       console.log(b);
       //will print 3, correct answer.
       
       *b=a+1;
        a=2;
        console.log(b);
        //will print undefined, or an incorrect answer. This has to be the way code is interpreted, which is from top to bottom, left to right. So that, 'a' is undefined, as there is no input for it yet. So therefore the variable b is still undefined. The interpreter/compiler doesn't retroactively apply the 'a' once it is defined. Therefore when I call 'b' via my function log, should print 'a+1', as 'a' isn't defined. Because I'm really just telling my function log to print whatever is in variable 'b'. 
*A variable that is defined, can be changed by subsequent operations to that variable, duh right, but the tricky part is that you don't have to label that same variable as a variable each time you change it. 
     *var a=20;
      a=a+20;
      console.log(a);
      //will print 40, and I didn't define 'var a' a second time in order to change what is stored within variable 'a'. 
*object peroperty access: '.' As in console.log();
***"objects hold values at specific locations, called properties."
*curly brackets/blocks are not used as stand alone, with code inside. This is extra work typing the brackets and is pointless, as you can just forgoe them and have the same effect. The brackets are good for conditional statements and loops. 
*When naming a variable or function and the name has two or more words, use an _ between them. If it's a built in function, then the second word is capitalized, but no underscore. 
*A loop is exactly like a condition, the difference being: 
     *loop: if statement inside parentheses is true, run this code repeatedly until it is not true, then stop running the code within the block. While loop = while true, do this. 
     *Do While loop = first run the code, then if/while statement is true, run it again. Difference being that a 'do...while' loop will always run the first time. 
*var x=1;
 while (x<10) {
    x++;
    if (x == 5) {
       break;
    }
    console.log(x);
 }
*The 'for loop' is the most efficient because it defines everything you need within the structure of the paretheses. You define the variable used, the condition for whether or not to run the code again, and the incremental amount to apply. At which point, the curly brackets have instructions for what I want to do each time it runs. It's cleaner to use a 'for loop' instead of a 'while loop' or a 'do while' loop. 
     *for (var x=1; x<9; x=x+1) {
         console.log(x);
      }
      //1,2,3,4,5,6,7,8
     


































































































































































































































































