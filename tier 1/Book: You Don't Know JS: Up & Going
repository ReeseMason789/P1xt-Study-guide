https://github.com/getify/You-Dont-Know-JS/blob/master/up%20&%20going/README.md#you-dont-know-js-up--going

Notes: 

*Started me out with Java because it's the oldest and most widely used technology on the web. Most important for web development. Java Script, not just Java. 
*code = source code. Tells computer what tasks to perform. 
*words, numbers, symbols, operators, and arrangement of these, make up a language. 
*operator looks like this: a = b * 2; It is a mathematical operation. "a" and "b" are variables. variable = like a box you store something in, like a number. Or think of them as the number itself. 
* a digit, like the number 2, is called a literal value. 
*the "=" (assignment) and "*" (multiplication) are operators within themselves. 
*explained beautifully. The statement a=b*2; tells the computer to: 1)get current value stored in variable b 2)multiply that value by 2 3)store the result into variable a. 
*a program is a collection of statements. 
*interpreter/compiler = transforms/translates code into commands computer can understand. 
  *interpreting: translated top to bottom, line by line, every time program is run. 
  *compiling: translation done ahead of time. When program is run, it's running this already compiled computer instructions. 
*print text = output to the user. I'm using developer console until I can get Brackets to output text. 
* a=21; 
  b=a*2; 
  console.log(b); (this prints out logical conclusion.)
  42. 
*log(b) called a 'function call'. The b variable is handed to this 'log' function. 'log()' commands cpu to take variable b and print it to the console. 
*The 'console.' part is where the 'log()' function is located, i.e., in the console. Called an 'object reference'.  
*Another way to create text/user output is with 'alert()' function. And this spits out the answer in a pop-up box that I have to click 'ok'. That's part of it's function: 1)To spit out answer 2)In a pop up box. 
*A function is a rule, that is applied to an input, and gives an output. Example: input is 5 beans, function is you add 3 beans, output would be 8 beans. Function = a constant rule that is applied to an input, and spits out an output. 
*The 'log()' fuction tells machine to show me/print what the value of 'b' is. 
*'prompt()' is a function. It asks the user whatever is between it's parethesis, in a pop up box. The answer is then saved as a variable. 
       *age=prompt("what's your age?");
       *a box pops up.
       *I input '29'.
       *Now the variable 'age' is equal to '29'. 
       *console.log(age); '29' should print out. 
*a=42; 
     *variable on left side called 'target variable'
     *equal sign is called an operator. This particular operator used for assignment. 
     *value on right side, called 'source value'. 
     *To specify assignment of a variable, the variable is always on left hand side and value is on right side. 
*'var' is short for variable. 
     *example: var a=20; This sets 'a' as a variable, and give it the value of 20. 
     *now that I've set 'scope'/precedent of 'a' being a variable, i can subsequently change it. 
     *a=a+1; now variable 'a' is set to 21. 
*compound assignment operators: +=, -=, *=, /=.
     * Example: a+=2; same as a=a+2. Perform two operations. Tricky. 
     *a-=5; same as a=a-5. 
     *a*=9; same as a=a*9.
     *a/=9; same as a=a/9. 
*increment/decrement. Incrementing/decrementing. Basically, increasing/decreasing a variable by one. 
     *x++; the '++' is the incrementer. Adds one, to the variable. Looks like this: x=x+1. 
     *x--; x=x-1.
     *if the plus or minus signs come before the variable, called prefix operator. Adds one then returns value. 
     *postfix operator (x++) returns value of variable then adds one. 
*fuzzy logic. These are operators. They perform an operation.
     *'==' means roughly equal. a==b
     *'===' means strictly equal. a===b
     *'!=' means roughly not-equal. a!=b
     *'!==' means strictly not-equal. a!==b
*comparison.
     *'<' means less than. 1<2
     *'>' greater than. 2>1
     *'<=' less than or roughly equal to. 3<=4
     *'>=' greater than or roughly equal to. 2>=2.
     *'=>' or '=<' doesn't work for comparisons. Need to have the greater/less part first. 
*operand=variable. 
     *A binary operator has two operands/variables, one on each side of the operator. 3+4
     *unary operator has one variable/operand. Either before or after the operator. a++, or ++a.
     *compound binary operator. a+=b; which is a=a+b.
     *operand just means the thing/object that the operator is acting upon. 
*Remainder operator. 12%5=2 or returns 2. 
*logical operators.
     *&& (and)
     *|| (or)
*When you need to do math, you want a number.
*when you need to print a word/characters on the screen, you need a string. A string is one or more: characters, words, sentences.
*when you need to make a decision in your program, you need a boolean. boolean comes back with a value that is either true or false. 
     *"I am a string"
     *'I am also a string'
     *42; number.
     *true; false; boolean. 
     *These are all types of values. A value can be a string/number/boolean. There are also arrays, objects, functions, and more. 
*A number can also be a string, if it is in quotes. var a="42", this is a string. var b=42; this is a number. 
*I can convert/coerce different value types. If I want to convert/coerce a string into a number.
     *var a="42"; 
      var b=number(a);
      console.log(a); will print out string "42".
      console.log(b); will print out number 42. 
      'number' is a function that converts this type of string, to a type of number. In Javascript, this is called explicit coercion, from one type to another. There is implicit coercion, it's not a function I type out, and it happen automatically. Like this: "99.99" == 99.99; The comparison then becomes 99.99 == 99.99, which is true. 
      *explicit conversion/coercion also called casting. It is performed by code instructions. 
*Machine code= a series of binary 0s and 1s. 
*choosing good names for variables and functions allows reader of code, and me, to better understand what is going on. 
*To make a comment in Javascript
     *//this is a single-line comment
     *     /*This is a 
                 multiline comment. */
     * Multiline comment can also be put in the middle of text: var a= /*won't be read by machine*/ 42;
*variable= the value within can vary over time.
* I can declare a variable to hold a specific type of value. So only strings, or only numbers. This called 'type enforcement' or 'static typing'. 
*'weak typing'/'dynamic typing' = variable can hold any type of value/type form. So a single variable can hold whatever a string one moment, a digit next, etc. Javascript uses weak/dynamic typing. 
*To convert/coerce a number to string
     *var a=1;
      a=string(a);
      console.log(a); will print out "1"
*

















































































































































































































































































